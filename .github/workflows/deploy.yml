name: Test & Deploy Build Images

on:
  push:
    tags:
      - "*.*.*"

jobs:
  
  test:
    name: pytest integration test
    runs-on: ubuntu-latest

    steps:
      - name: Setup up Python 3.8      
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      
      - name: clone repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Install test dependencies
        working-directory: ./tests/integration
        run: |
          pip3 install -r requirements.dev.txt
      
      - name: Run integration tests
        working-directory: ./tests/integration
        run: |
          chmod +x ./scripts/01-run-tests.sh
          ./scripts/01-run-tests.sh
  
        
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v2
      
      - name: Prepare of Docker Build
        id: prep
        run: |
          DOCKER_IMAGE=wutadmin/node-red-slim
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and Push Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          target: prod
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}
