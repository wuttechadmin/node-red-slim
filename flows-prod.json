[
    {
        "id": "e909f3d911422da7",
        "type": "tab",
        "label": "Main UI",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7c71c7b8.2c9fe8",
        "type": "ui_group",
        "name": "Identify Image",
        "tab": "fbf5c038.d632b",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "db027e416847d093",
        "type": "ui_group",
        "name": "Detections",
        "tab": "fbf5c038.d632b",
        "order": 4,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4c32eda946d15c83",
        "type": "ui_group",
        "name": "Controls",
        "tab": "fbf5c038.d632b",
        "order": 2,
        "disp": true,
        "width": "2",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fbf5c038.d632b",
        "type": "ui_tab",
        "name": "Home",
        "icon": "light",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d3e3350ba9d20348",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#5a69dd",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#5a69dd",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#5a69dd",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#99a3ea",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#5a69dd",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "b932bb0d56c2dad5",
        "type": "ui_tab",
        "name": "About",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3c130efb92c79cbf",
        "type": "ui_group",
        "name": "This App",
        "tab": "b932bb0d56c2dad5",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da0ca243d2d46654",
        "type": "ui_group",
        "name": "MainUI",
        "tab": "f51158cf17eb8e52",
        "order": 1,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f51158cf17eb8e52",
        "type": "ui_tab",
        "name": "WUTTECH Monitoring",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "38193c8ae0fbe830",
        "type": "ui_group",
        "name": "Attributes",
        "tab": "fbf5c038.d632b",
        "order": 3,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "11178920f7e68ca3",
        "type": "ui_group",
        "name": "Time",
        "tab": "fbf5c038.d632b",
        "order": 1,
        "disp": true,
        "width": "2",
        "collapse": false,
        "className": ""
    },
    {
        "id": "39d9eaba67bb6b0e",
        "type": "ui_group",
        "name": "Attributes",
        "tab": "fbf5c038.d632b",
        "order": 3,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e203d10db5bb6a8b",
        "type": "ui_text",
        "z": "e909f3d911422da7",
        "group": "7c71c7b8.2c9fe8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "txbDetected",
        "label": "Dectected:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 850,
        "y": 160,
        "wires": [],
        "info": "## "
    },
    {
        "id": "3fd734e2bf2a17d2",
        "type": "image",
        "z": "e909f3d911422da7",
        "name": "ipImage_Preview",
        "width": "600",
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": true,
        "outputs": 1,
        "x": 150,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "2b50424718f8ca83",
        "type": "ui_webcam",
        "z": "e909f3d911422da7",
        "name": "wcCamera",
        "group": "7c71c7b8.2c9fe8",
        "order": 1,
        "width": 6,
        "height": 6,
        "countdown": true,
        "autoStart": true,
        "hideCaptureButton": false,
        "showImage": "15",
        "mirror": true,
        "format": "jpeg",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "3fd734e2bf2a17d2",
                "fa1fd9c6f999b745",
                "7500fe35255ce331"
            ]
        ],
        "inputLabels": [
            "Capture Trigger"
        ],
        "outputLabels": [
            "Image Payload"
        ]
    },
    {
        "id": "3746b7f0e1b0285c",
        "type": "ui_digital_clock",
        "z": "e909f3d911422da7",
        "name": "clkTime",
        "group": "11178920f7e68ca3",
        "order": 1,
        "width": "2",
        "height": 1,
        "x": 860,
        "y": 120,
        "wires": []
    },
    {
        "id": "1f40d9e83b3a41e3",
        "type": "trigger",
        "z": "e909f3d911422da7",
        "name": "dtTrigger",
        "op1": "",
        "op2": "0",
        "op1type": "date",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "stop",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 660,
        "y": 120,
        "wires": [
            [
                "3746b7f0e1b0285c"
            ]
        ]
    },
    {
        "id": "652d8894dc92469f",
        "type": "start-up-trigger",
        "z": "e909f3d911422da7",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "1f40d9e83b3a41e3",
                "a3274110eb89b6c7",
                "6caa6e4e65400336",
                "2b50424718f8ca83",
                "be99cb288c5fdb3a",
                "68bc93a0bd0fab79",
                "1c3d19d712a75a0f",
                "d9bac164a4b440d3"
            ]
        ]
    },
    {
        "id": "37ec910349d77ff1",
        "type": "delay",
        "z": "e909f3d911422da7",
        "name": "fnDelay",
        "pauseType": "delayv",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 260,
        "wires": [
            [
                "49fd28bb96345505"
            ]
        ]
    },
    {
        "id": "49fd28bb96345505",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnClearPayload",
        "func": "msg.payload = \"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 260,
        "wires": [
            [
                "e203d10db5bb6a8b",
                "be99cb288c5fdb3a"
            ]
        ]
    },
    {
        "id": "a3274110eb89b6c7",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnBuildStartMsg",
        "func": "msg.payload = \"<font size=6>AI Active</font>\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "e203d10db5bb6a8b"
            ]
        ]
    },
    {
        "id": "2c94cbac532d5d55",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnFilterNull",
        "func": "if (msg.payload == null ) {\n    msg.payload = \"<font size=7>Unknown</font>\";\n}\nelse {\n    msg.payload = \"<font size=9>\" + msg.payload + \"</font>\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "e203d10db5bb6a8b"
            ]
        ]
    },
    {
        "id": "6caa6e4e65400336",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnSetDelay",
        "func": "msg.delay = 20000;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 260,
        "wires": [
            [
                "37ec910349d77ff1"
            ]
        ]
    },
    {
        "id": "b659197d49a66e6f",
        "type": "ui_list",
        "z": "e909f3d911422da7",
        "group": "db027e416847d093",
        "name": "lsDisplay",
        "order": 1,
        "width": "3",
        "height": "6",
        "lineType": "two",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "",
        "x": 860,
        "y": 360,
        "wires": []
    },
    {
        "id": "bf9e5e7b9eedba9d",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnSetListMsg",
        "func": "//  Check for Unknown\n\n//  Check for Clear/Init\nif (!context.lstDisplay || msg.payload == 'clear') {\n    context.lstDisplay = [];\n    context.lstDisplay.length = 0;\n    //context.lstDisplay.push(\"Past: Detection\");\n    msg.payload = context.lstDisplay;\n    return [msg];\n}\nswitch(msg.payload) {\n    case null: {\n        msg.payload = \"Unknown\"\n        context.lstDisplay.push(msg.payload);\n        msg.payload = context.lstDisplay;\n    }\n    break;\n    case 'clear': {\n        context.lstDisplay = [];\n        context.lstDisplay.length = 0;\n        //context.lstDisplay.push(\"Past: Detection\");\n        msg.payload = context.lstDisplay;\n    }\n    break;\n    default:{\n        context.lstDisplay.push(msg.payload);\n        msg.payload = context.lstDisplay;\n    }\n    break;\n}\n\n\nreturn [msg];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "b659197d49a66e6f"
            ]
        ]
    },
    {
        "id": "eccb7f02e5f8758c",
        "type": "inject",
        "z": "e909f3d911422da7",
        "name": "Capture Image",
        "props": [
            {
                "p": "capture",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "capture",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "2b50424718f8ca83"
            ]
        ]
    },
    {
        "id": "2fe3c988dbf03c39",
        "type": "ui_button",
        "z": "e909f3d911422da7",
        "name": "btnClearList",
        "group": "db027e416847d093",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Clear List",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "clear",
        "payloadType": "str",
        "topic": "payload",
        "topicType": "msg",
        "x": 850,
        "y": 320,
        "wires": [
            [
                "bf9e5e7b9eedba9d",
                "127f6f1c89257619"
            ]
        ]
    },
    {
        "id": "25ae4643e0ac423b",
        "type": "kasa",
        "z": "e909f3d911422da7",
        "name": "kasaDevice",
        "device": "192.168.1.104",
        "interval": 60000,
        "eventInterval": 15000,
        "payload": "getInfo",
        "payloadType": "info",
        "debug": false,
        "x": 850,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a7b930d80dc3e2cf",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnDoAction",
        "func": "//\n/// Functions\nfunction personAction(debug=false){\n    if (context.detection) {\n        node.warn(\"Person Check:\" + msg.payload)\n        msg.topic = context.kasaDevice;\n        msg.payload = context.kasaDeviceState = true; //\n        if (debug){ node.warn(\"Topic / Payload: \" + msg.topic + ' / ' + msg.payload); }\n    } \n}\n\nfunction toggleState(payload) {\n    node.warn(\"State Check:\" + payload)\n    // Context Found Do Function\n    if(context.kasaDeviceState == true){ \n        context.kasaDeviceState = false\n        msg.payload = context.kasaDeviceState\n    } else if (context.kasaDeviceState == false){\n        context.kasaDeviceState = true\n        msg.payload = context.kasaDeviceState\n    }    \n}\n\nfunction showWarnings(debug=false) {\n    if (debug){\n        node.warn(\"Detection State: \" + context.detection);\n        node.warn('Kasa State: ' + context.kasaDeviceState);\n        node.warn(\"Kasa Target IP: \" + context.kasaDevice);\n    }\n}\n\nfunction doDefaultAction(){\n    if(context.detection){\n        msg.payload = false\n        msg.topic = context.kasaDevice;\n    } else {\n        msg.topic = context.kasaDevice;\n    }\n}\n\n/// Actions\nswitch(msg.payload) {\n    case 'person': {\n        node.warn('Person case')\n        personAction();\n    }\n    break;\n    \n    case 'detectOn': {\n        node.warn('Detect On')\n        context.detection = true;\n        msg.topic = context.kasaDevice;\n    }\n    break;\n    \n    case 'detectOff': {\n        node.warn('Detect Off')\n        context.detection = false;\n        msg.topic = context.kasaDevice;\n    }\n    break;\n\n    case 'toggle': {\n        node.warn('Toggle case')\n        toggleState(msg.payload);\n    }\n    break;\n\n    case '': {\n        node.warn('Empty case')\n        msg.topic = context.kasaDevice;\n    }\n    break;\n    \n    case null: {\n        node.warn('Null case')\n        msg.topic = context.kasaDevice;\n    }\n    break;\n    \n    default: {\n        node.warn('Default case')\n        doDefaultAction();\n    }\n    break;\n}\n\nshowWarnings();\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.kasaDeviceState =  false; \ncontext.kasaDevice = '192.168.1.104';\n\ncontext.detection  = true;\n\n/**/\nconst client = new tplink.Client();\n// Look for devices, log to console, and turn them on\nclient.startDiscovery().on('device-new', (device) => {\n  device.getSysInfo().then(node.warn);\n  context.deviceList.push(device.netif);\n  //device.setPowerState(true);\n  node.warn('Device Found: ' + device.netif);\n});\n\n",
        "finalize": "",
        "libs": [
            {
                "var": "tplink",
                "module": "tplink-smarthome-api"
            }
        ],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "25ae4643e0ac423b"
            ]
        ]
    },
    {
        "id": "f293acbdcd2540d2",
        "type": "inject",
        "z": "e909f3d911422da7",
        "name": "ijDetect _Off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "detectOff",
        "payloadType": "str",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "fe45d704dc1e8d51"
            ]
        ]
    },
    {
        "id": "c95dc4994e3e985e",
        "type": "ui_button",
        "z": "e909f3d911422da7",
        "name": "btnOffice",
        "group": "4c32eda946d15c83",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Office",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "toggle",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 860,
        "y": 460,
        "wires": [
            [
                "a7b930d80dc3e2cf"
            ]
        ]
    },
    {
        "id": "fa1fd9c6f999b745",
        "type": "cocossd",
        "z": "e909f3d911422da7",
        "name": "tfCocossd",
        "x": 400,
        "y": 360,
        "wires": [
            [
                "6caa6e4e65400336",
                "a7b930d80dc3e2cf",
                "bf9e5e7b9eedba9d",
                "2c94cbac532d5d55"
            ]
        ]
    },
    {
        "id": "e8ae4f98a53628dc",
        "type": "ui_text",
        "z": "e909f3d911422da7",
        "group": "3c130efb92c79cbf",
        "order": 2,
        "width": "8",
        "height": "8",
        "name": "lblRequirements",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 840,
        "y": 40,
        "wires": []
    },
    {
        "id": "286ee0ef9995a3d3",
        "type": "inject",
        "z": "e909f3d911422da7",
        "name": "ijPerson",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "person",
        "payloadType": "str",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "a7b930d80dc3e2cf"
            ]
        ]
    },
    {
        "id": "faefac613f227a30",
        "type": "inject",
        "z": "e909f3d911422da7",
        "name": "ijCouch",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "couch",
        "payloadType": "str",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "a7b930d80dc3e2cf"
            ]
        ]
    },
    {
        "id": "fe45d704dc1e8d51",
        "type": "ui_switch",
        "z": "e909f3d911422da7",
        "name": "swDetection",
        "label": "Detector Action",
        "tooltip": "",
        "group": "7c71c7b8.2c9fe8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "detectOn",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "detectOff",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 390,
        "y": 580,
        "wires": [
            [
                "4be2c00ee370bcd0"
            ]
        ]
    },
    {
        "id": "4be2c00ee370bcd0",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnChangeDetection",
        "func": "if (msg.payload == \"detectOn\") {\n    context.detection = true; \n} else if (msg.payload == 'detectOff') { \n    context.detection = false; \n}\nnode.warn(\"Detection State: \" + context.detection)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.detection = true;",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 580,
        "wires": [
            [
                "a7b930d80dc3e2cf"
            ]
        ]
    },
    {
        "id": "dfc279566dcd01c5",
        "type": "inject",
        "z": "e909f3d911422da7",
        "name": "ijDetect_On",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "detectOn",
        "payloadType": "str",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "fe45d704dc1e8d51"
            ]
        ]
    },
    {
        "id": "be99cb288c5fdb3a",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnClearList",
        "func": "msg.payload = 'clear';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            [
                "2fe3c988dbf03c39"
            ]
        ]
    },
    {
        "id": "dc1866e581b596cf",
        "type": "inject",
        "z": "e909f3d911422da7",
        "name": "ijToggle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "toggle",
        "payloadType": "str",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "a7b930d80dc3e2cf"
            ]
        ]
    },
    {
        "id": "68bc93a0bd0fab79",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnSetDetection",
        "func": "//msg.delay = 15000;\nmsg.payload = 'detectOn';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 540,
        "wires": [
            [
                "fe45d704dc1e8d51"
            ]
        ]
    },
    {
        "id": "845d11502d8e7635",
        "type": "ui_template",
        "z": "e909f3d911422da7",
        "group": "3c130efb92c79cbf",
        "name": "lblDevInfo",
        "order": 1,
        "width": "8",
        "height": "3",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1c3d19d712a75a0f",
        "type": "template",
        "z": "e909f3d911422da7",
        "name": "tplSetDevInfo",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<h2>Developer</h2><br>\nRobert Burkhall<br>\nrobert.burkhall@weunderstandtechnology.com<br>\nAtlanta, Ga <br>\n",
        "output": "str",
        "x": 640,
        "y": 80,
        "wires": [
            [
                "845d11502d8e7635"
            ]
        ]
    },
    {
        "id": "d9bac164a4b440d3",
        "type": "template",
        "z": "e909f3d911422da7",
        "name": "tplSetText",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<h2>Node Components</h2><br>\n<p>\nNode-RED version: v3.0.2 <br>\nNode.js  version: v18.15.0<br>\nLinux 5.19.0-35-generic x64 LE<br>\n</p>\n<h2>Packages</h2>\n<p tabindex=\"1\">\nsemver:7.3.8,<br>\nuuid:9.0.0,<br>\nnext:canary,<br>\nnode-red: 3.0.0,<br>\n@tensorflow/tfjs:4.2.0,<br>\nnode-red-dashboard:3.4.0,<br>\nnode-red-contrib-startup-trigger:0.1.0,<br>\nnode-red-node-ui-list:0.3.6,<br>\nnode-red-contrib-ui-digital-clock:1.0.0,<br>\nnode-red-contrib-image-output:0.6.3,<br>\nnode-red-contrib-tplink:1.0.1,<br>\nnode-red-node-ui-webcam:0.4.0,<br>\n@tensorflow/tfjs:4.2.0,<br>\nnode-red-contrib-mssql-plus:0.10.2,<br>\nnode-red-contrib-tensorflow:0.4.2,<br>\nnode-red-contrib-ui-level:0.1.46,<br>\nnode-red-contrib-ui-countdown-timer-switch:1.4.1,<br>\nnode-red-contrib-mongodb4:1.10.0\"<br>\n</p>",
        "output": "str",
        "x": 660,
        "y": 40,
        "wires": [
            [
                "e8ae4f98a53628dc"
            ]
        ]
    },
    {
        "id": "fb1a2fb1c2e3b649",
        "type": "debug",
        "z": "e909f3d911422da7",
        "name": "tfHandPose",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 600,
        "wires": []
    },
    {
        "id": "7500fe35255ce331",
        "type": "posenet",
        "z": "e909f3d911422da7",
        "name": "tfPosenet",
        "x": 400,
        "y": 400,
        "wires": [
            [
                "127f6f1c89257619"
            ]
        ]
    },
    {
        "id": "298a4929b7651712",
        "type": "ui_list",
        "z": "e909f3d911422da7",
        "group": "39d9eaba67bb6b0e",
        "name": "lsAttributes",
        "order": 1,
        "width": "4",
        "height": "7",
        "lineType": "two",
        "actionType": "none",
        "allowHTML": true,
        "outputs": 0,
        "topic": "",
        "x": 850,
        "y": 400,
        "wires": []
    },
    {
        "id": "127f6f1c89257619",
        "type": "function",
        "z": "e909f3d911422da7",
        "name": "fnSetAttribMsg",
        "func": "switch(msg.payload) {\n    case null: {\n        msg.payload = \"Unknown\"\n        context.lstDisplay.push(msg.payload);\n        msg.payload = context.lstDisplay;\n    }\n    break;\n    case 'clear': {\n        context.lstDisplay = [];\n//        context.lstDisplay.length = 0;\n//        context.lstDisplay.push(\"Past: Attributes\");\n        msg.payload = context.lstDisplay;\n    }\n    break;\n    default:{\n        Object.keys(msg.payload).forEach(key => {\n          //node.warn(key, msg.payload[key]);\n          context.lstDisplay.push(key);\n        }); \n\n       // context.lstDisplay.push(msg.payload);\n        msg.payload = context.lstDisplay;\n    }\n    break;\n}\n\n\nreturn [msg];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 400,
        "wires": [
            [
                "298a4929b7651712"
            ]
        ]
    }
]